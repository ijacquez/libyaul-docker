#!/usr/bin/env bash

set -e

_thisdir="$(dirname "${0}")"
test "${_thisdir}" = "." && _thisdir=${PWD}
_ifwroot="${_thisdir}"/qt-ifw
_arch=$(uname -m)
_date=$(date +'%Y%m%d')
_dateqif=$(date +'%Y-%m-%d')
_version=${_date}
_filename=yaul-${_arch}-${_date}.exe
_log=/tmp/installer-${_arch}-${_date}.log
_bitness=64
_archivegen="/mingw${_bitness}/bin/archivegen.exe"
_binarycreator="/mingw${_bitness}/bin/binarycreator.exe"
_installerbase="/mingw${_bitness}/bin/installerbase.exe"
_7z="/usr/bin/7z" # 7z is a script
_tar="/usr/bin/tar"
_git="/usr/bin/git"
_newmsysbase=/tmp/newmsys
_newmsys=${_newmsysbase}/msys"${_bitness}"

# Hard coded, as it's more stable to have control over which base you're using
_archive_msys64_base="msys2-base-x86_64-20190524.tar.xz"

_pacman_packages=(
    diffutils
    dos2unix
    gcc
    git
    make
    mingw-w64-x86_64-libftdi
    p7zip
    patch
    pkg-config
    python3
    python3-pip
    tar
    unzip
    wget
    xorriso
    zip
)

declare -a undo_commands

_exitcode=5

exit_with_undo() {
  for _cmd in ${undo_commands[@]}; do
    eval "${_cmd}" | tee -a "${_log}"
  done
  exit ${_exitcode}
}

exit_cleanly() {
  _exitcode=$1; shift;
  local _message=$1; shift;
  echo "${_message}" | tee -a "${_log}"
  exit_with_undo
}

download_file() {
    local _id
    _id=${1}

    local _file
    _file=${2}

    rm -r -f /tmp/cookies.txt

    printf -- "Downloading \"%s\"\n" "${_file}" | tee -a "${_log}"

    local _data
    _data=$(/usr/bin/wget \
      --quiet \
      --save-cookies /tmp/cookies.txt \
      --keep-session-cookies \
      --no-check-certificate \
      'https://drive.google.com/uc?export=download&id='"${_id}" \
      -O- \
      | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')

    /usr/bin/wget --force-directories \
      --load-cookies /tmp/cookies.txt \
      "https://drive.google.com/uc?export=download&confirm=${_data}&id=${_id}" \
      -O "${_file}"

    rm -r -f /tmp/cookies.txt
}

undo_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<ReleaseDate>${_dateqif}<|<ReleaseDate>@DATE@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<Version>${_version}<|<Version>@VERSION@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|msys${_bitness}|msys@BITNESS@|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|${_bitness}-bit|@BITNESS@-bit|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|if (\"@BITNESS@-bit\" === \"@BITNESS@-bit\")|if (\"@BITNESS@-bit\" === \"32-bit\")|g" "{}" \;
}

trap exit_with_undo 0 1 2 15

create_chroot_system() {
  [ -d ${_newmsysbase} ] && rm -rf ${_newmsysbase}
  mkdir -p "${_newmsys}"
  pushd "${_newmsys}" > /dev/null

  mkdir -p var/lib/pacman
  mkdir -p var/log
  mkdir -p tmp

  if [ ! -f "${_thisdir}/${_archive_msys64_base}" ]; then
    exit_cleanly "1" "failed to find '${_thisdir}/${_archive_msys64_base}' (newmsys2)"
  fi

  eval "/usr/bin/tar -mxvpf \"${_thisdir}/${_archive_msys64_base}\" -C \"${_newmsysbase}/\"" 2>&1 | tee -a "${_log}"
  _result=$?
  if [ "${_result}" -ne "0" ]; then
    exit_cleanly "1" "failed to create newmsys2"
  fi

  popd > /dev/null
}

do_create_dirs() {
  /usr/bin/rm -r -f "${_newmsys}/opt/x-tools"
  /usr/bin/mkdir -p "${_newmsys}/opt/x-tools"

  /usr/bin/rm -r -f "${_newmsys}/opt/emulators"
  /usr/bin/mkdir -p "${_newmsys}/opt/emulators"

  /usr/bin/rm -r -f "${_newmsys}/etc/post-install/dependencies/pip3"
  /usr/bin/mkdir -p "${_newmsys}/etc/post-install/dependencies/pip3"
}

do_copy_toolchain() {
  download_file "1hkQ6PKWDM29Xv0ZhJzUBRg0Xvz09UFMI" "${_newmsys}/tmp/tool-chain.tar.bz2"

  eval "/usr/bin/tar mxvfjp \"${_newmsys}/tmp/tool-chain.tar.bz2\" -C \"${_newmsys}/opt/x-tools\"" 2>&1 | tee -a "${_log}"
}

do_hack_toolchain() {
  :
}

do_install_packages() {
  /usr/bin/pacman -Sw ${_pacman_packages[@]} --noconfirm --config "pacman.conf" > /tmp/download.lst
}

do_download_other_dependencies() {
  download_file "1r3Cr_l-q6zIwvPLLIdEf-yrSVxuELE6i" "${_newmsys}/tmp/mednafen-win64.zip"
  download_file "1v5XvgceP8T9nOFdKaVY2RewD3NIoS1Mk" "${_newmsys}/tmp/yabause-win64.zip"

  /usr/bin/pip3 download click -d "${_newmsys}/etc/post-install/dependencies/pip3" --no-binary :all:-v 2>&1
}

do_setup_emulators() {
  # Extract Mednafen
  /usr/bin/mkdir -p "${_newmsys}/opt/emulators/mednafen"
  /usr/bin/unzip -d "${_newmsys}/opt/emulators/mednafen" "${_newmsys}/tmp/mednafen-win64.zip"
  /usr/bin/cp -r ".mednafen" "${_newmsys}/etc/skel/"

  # Extract Yabause
  /usr/bin/mkdir -p "${_newmsys}/opt/emulators/yabause"
  /usr/bin/cp -r ".yabause" "${_newmsys}/etc/skel/"
  /usr/bin/unzip -d "${_newmsys}/opt/emulators/yabause" "${_newmsys}/tmp/yabause-win64.zip"
}

do_copy_post_install_script() {
  mkdir -p "${_newmsys}/etc/post-install"
  cp -v -f "${_thisdir}/scripts/install.sh" "${_newmsys}/etc/post-install/09-yaul-install.post"
}

do_copy_skel_files() {
  /usr/bin/cp -r ".minttyrc" "${_newmsys}/etc/skel/"
}

do_repository_clone() {
  pushd . >/dev/null 2>&1

  mkdir -p "${_newmsys}/opt"
  cd "${_newmsys}/opt"
  if [ ! -d "libyaul" ]; then
    /usr/bin/git clone "https://github.com/ijacquez/libyaul.git"
  fi
  cd "${_newmsys}/opt/libyaul"
  /usr/bin/git submodule init
  /usr/bin/git submodule update -f

  popd >/dev/null 2>&1
}

do_create_motd() {
  cat > "${_newmsys}/etc/motd.tail" <<EOF
printf -- "[H[2J"

_cols=\`tput cols\`
_lines=\`tput lines\`

printf -- "*%.0s" \`seq 1 \${_cols}\`

printf -- "\
* Paths\n\
**      Examples: /opt/libyaul/examples\n\
** Documentation: /opt/libyaul/docs\n\
**         Tools: /opt/libyaul/tools\n\
**\n\
* Emulators\n\
**   Mednafen: /opt/emulators/mednafen\n\
**    Yabause: /opt/emulators/yabause\n\
*\n"

printf -- "* Environment variables\n"

env | grep 'YAUL' | sort | awk -F= '{ printf "** %-25s = %s\n", \$1, \$2 }'

# Check Mednafen BIOS paths
if [[ ! -f "\${HOME}/.mednafen/firmware/mpr-17933.bin" ]] &&
   [[ ! -f "\${HOME}/.mednafen/firmware/sega_101.bin" ]] &&
   [[ ! -f "\${HOME}/.mednafen/mpr-17933.bin" ]] &&
   [[ ! -f "\${HOME}/.mednafen/sega_101.bin" ]]; then
   printf -- "\
*\n\
* Place BIOS \"mpr-17933.bin\" or \"sega_101.bin\" in:\n\
** %s\n" "\`cygpath -w "\${HOME}/.mednafen/"\`"
fi

# Check Yabause BIOS paths
if [[ ! -f "\${HOME}/.yabause/sega_101.bin" ]]; then
   printf -- "\
*\n\
* Place BIOS \"sega_101.bin\" in:\n\
** %s\n" "\`cygpath -w "\${HOME}/.yabause/"\`"
fi

printf -- "*%.0s" \`seq 1 \${_cols}\`

unset _cols
unset _lines
EOF
}

do_setup_bashrc() {
  # Undo some defaults
  /usr/bin/sed -E -i 's/^# alias ls.*/alias ls='"'"'ls --color=auto'"'"'/g' "${_newmsys}/etc/skel/.bashrc"
  /usr/bin/sed -E -i 's/^# (alias ll)/\1/g' "${_newmsys}/etc/skel/.bashrc"
  /usr/bin/sed -E -i 's/^# (alias la)/\1/g' "${_newmsys}/etc/skel/.bashrc"
  /usr/bin/sed -E -i 's/^# (shopt -s histappend)/\1/g' "${_newmsys}/etc/skel/.bashrc"

  # Append to .bashrc
  cat >> "${_newmsys}/etc/skel/.bashrc" <<"EOF"

# Begin Yaul customization {
  # Set up environment
  source "${HOME}/.yaul.env"

  # Update PATH
  export PATH="${YAUL_INSTALL_ROOT}/bin:${PATH}"
  export PATH="/opt/emulators/mednafen:${PATH}"
  export PATH="/opt/emulators/yabause:${PATH}"

  # Update PS1 to something more modest
  export PS1="\[\e[1;32m\]\u@\[\e[1;33m\]\h\[\e[0m\]\$ "

  # Show MOTD
  [ -e ".hushlogin" ] || (source /etc/motd.tail 2>/dev/null || true)
# } End
EOF
}

do_setup_yaul_env() {
  /usr/bin/rm -r -f /tmp/yaul.env
  /usr/bin/cp "${_newmsys}/opt/libyaul/yaul.env.in" /tmp/yaul.env

  /usr/bin/sed -E -i "s#^(export\s+YAUL_INSTALL_ROOT)=.*#\1=/opt/x-tools/sh2eb-elf#g" "/tmp/yaul.env"
  /usr/bin/sed -E -i "s#^(export\s+YAUL_BUILD_ROOT)=.*#\1=/opt/libyaul#g" "/tmp/yaul.env"
  /usr/bin/sed -E -i "s#^(export\s+YAUL_BUILD)=.*#\1=build#g" "/tmp/yaul.env"
  /usr/bin/sed -E -i "s#^(export\s+YAUL_CDB)=.*#\1=1#g" "/tmp/yaul.env"
  /usr/bin/sed -E -i "s#^(export\s+YAUL_OPTION_DEV_CARTRIDGE)=.*#\1=0#g" "/tmp/yaul.env"

  /usr/bin/mv /tmp/yaul.env "${_newmsys}/etc/skel/.yaul.env"
}

do_build_yaul() {
  /usr/bin/rm -r -f /tmp/yaul.env
  /usr/bin/cp "${_newmsys}/opt/libyaul/yaul.env.in" /tmp/yaul.env

  /usr/bin/sed -E -i "s#^(export\s+YAUL_INSTALL_ROOT)=.*#\1=${_newmsys}/opt/x-tools/sh2eb-elf#g" "/tmp/yaul.env"
  /usr/bin/sed -E -i "s#^(export\s+YAUL_BUILD_ROOT)=.*#\1=/tmp#g" "/tmp/yaul.env"
  /usr/bin/sed -E -i "s#^(export\s+YAUL_BUILD)=.*#\1=yaul.build#g" "/tmp/yaul.env"
  /usr/bin/sed -E -i "s#^(export\s+YAUL_CDB)=.*#\1=0#g" "/tmp/yaul.env"
  # We want to compile ssload
  /usr/bin/sed -E -i "s#^(export\s+YAUL_OPTION_DEV_CARTRIDGE)=.*#\1=1#g" "/tmp/yaul.env"

  pushd . >/dev/null 2>&1
  cd ${_newmsys}/opt/libyaul

  # Build
  /usr/bin/bash -e <<EOT
/usr/bin/rm -r -f /tmp/yaul.build
/usr/bin/mkdir -p /tmp/yaul.build
. /tmp/yaul.env
NOCOLOR=1 SILENT=1 /usr/bin/make install-release
NOCOLOR=1 SILENT=1 /usr/bin/make install-tools
/usr/bin/rm -r -f /tmp/yaul.build
EOT

  popd >/dev/null 2>&1
}

do_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@DATE@|${_dateqif}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@VERSION@|${_version}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|@BITNESS@|${_bitness}|g" "{}" \;
  undo_commands+=("undo_seds")
}

do_remove_log() {
  rm -f "${_log}"
}

do_create_chroot_system() {
  echo "Creating Yaul chroot system ${_newmsys}" | tee -a "${_log}"
  create_chroot_system
}

do_remove_previous_installer() {
  echo "Creating Yaul installer /tmp/${_filename}" | tee -a "${_log}"
  if [ -f "/tmp/${_filename}" ]; then
    rm -f "/tmp/${_filename}"
  fi
}

do_handle_build_dependencies() {
  if [ ! -f "${_archivegen}" ]; then
    eval "pacman -S --noconfirm mingw${_bitness}/mingw-w64-${_arch}-qt-installer-framework" | tee -a "${_log}"
  fi

  if [ ! -f "${_archivegen}" ]; then
    exit_cleanly "2" "installation of mingw${_bitness}/mingw-w64-${_arch}-qt-installer-framework failed. See ${_log}"
  fi

  if ! [ -f "${_7z}" ]; then
    eval "pacman -S --noconfirm msys/p7zip" | tee -a "${_log}"
  fi

  if [ ! -f "${_7z}" ]; then
    exit_cleanly "2" "installation of p7zip failed. See ${_log}"
  fi

  if ! [ -f "${_tar}" ]; then
    eval "pacman -S --noconfirm tar" | tee -a "${_log}"
  fi

  if [ ! -f "${_tar}" ]; then
    exit_cleanly "2" "installation of tar failed. See ${_log}"
  fi

  if ! [ -f "${_git}" ]; then
    eval "pacman -S --noconfirm git" | tee -a "${_log}"
  fi

  if [ ! -f "${_git}" ]; then
    exit_cleanly "2" "installation of git failed. See ${_log}"
  fi
}

do_cleanup_tmp_directory() {
  rm -r -f "${_newmsys}/tmp"
  /usr/bin/mkdir -p "${_newmsys}/tmp"
}

do_create_archives() {
  # Collect paths to archive
  local _data="${_ifwroot}"/packages/com.msys2.root.base/data
  [ -d "${_data}" ] && rm -rf "${_data}"
  mkdir -p "${_data}"
  local _dirs=
  for curr_dir in /etc /opt /var /tmp /usr /mingw64 /msys2_shell.cmd /msys2.exe /mingw64.exe /msys2.ini /mingw64.ini /msys2.ico /autorebase.bat autorebasebase1st.bat; do
    if [ -d ${_newmsys}${curr_dir} ] || [ -f ${_newmsys}${curr_dir} ]; then
      _dirs="${_dirs} ${_newmsys}$curr_dir"
    fi
  done

  # Create qt-ifw/packages/com.msys2.root.base/data/msys64.7z file
  if [ -n "${_dirs}" ]; then
    local _compress_cmd="${_archivegen} ${_data}/msys${_bitness}.7z ${_dirs}"
    pushd / > /dev/null
      echo "Run: ${_compress_cmd} ..." | tee -a "${_log}"
      eval "${_compress_cmd}" 2>&1 | tee -a "${_log}"
      _result=$?
      if [ "${_result}" -eq "0" ]; then
            echo " archivegen succeeded. Created ${_data}/msys${_bitness}.7z" | tee -a "${_log}"
      else
            exit_cleanly "3" "archivegen failed. See ${_log}"
      fi
    popd > /dev/null
  fi
}

do_make_installer() {
  eval "\"${_binarycreator}\" \
    -t \"${_installerbase}\" \
    -p \"${_ifwroot}/packages\" \
    -c \"${_ifwroot}/config/config.xml\" \
    --offline-only \
    \"${_filename}\" \
    -v"  | tee -a "${_log}"
}

do_remove_log
do_handle_build_dependencies
do_create_chroot_system
do_remove_previous_installer
do_create_dirs
do_copy_toolchain
do_seds
do_copy_post_install_script
do_copy_skel_files
do_repository_clone
do_setup_yaul_env
do_setup_bashrc
do_create_motd
do_build_yaul
do_install_packages
do_download_other_dependencies
do_setup_emulators
do_hack_toolchain
do_cleanup_tmp_directory
do_create_archives
do_make_installer

exit_cleanly "0" "All done, see \"${_filename}\""
