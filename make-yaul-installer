#!/usr/bin/env bash

set -e

# If left empty, a new base will be fetched
ARCHIVE_MSYS64_BASE_TARBALL=""

# Paths and files
ARCHIVE_EXPORT=(
  /etc
  /opt
  /var
  /tmp
  /usr
  /mingw64
  /msys2_shell.cmd
  /msys2.exe
  /msys2.ini
  /msys2.ico
  /mingw64.exe
  /mingw64.ini
  /mingw64.ico
  /yaul.ico
  /autorebase.bat
  autorebasebase1st.bat
)

# Packages to download (and later install)
PACMAN_PACKAGES=(
  mingw-w64-x86_64-yaul-tool-chain
  mingw-w64-x86_64-yaul-git
  mingw-w64-x86_64-yaul-emulator-yabause
  mingw-w64-x86_64-yaul-emulator-mednafen 
  yaul-examples-git
)

_thisdir="$(dirname "${0}")"
test "${_thisdir}" = "." && _thisdir=${PWD}
_ifwroot="${_thisdir}"/qt-ifw
_arch=$(uname -m)
_date=$(date +'%Y%m%d')
_dateqif=$(date +'%Y-%m-%d')
_version=${_date}
_filename=yaul-${_arch}-${_date}.exe
_log=/tmp/installer-${_arch}-${_date}.log
_bitness=64
_archivegen="/mingw${_bitness}/bin/archivegen.exe"
_binarycreator="/mingw${_bitness}/bin/binarycreator.exe"
_installerbase="/mingw${_bitness}/bin/installerbase.exe"
_7z="/usr/bin/7z" # 7z is a script
_tar="/usr/bin/tar"
_git="/usr/bin/git"
_newmsysbase=/tmp/newmsys
_newmsys=${_newmsysbase}/msys"${_bitness}"

declare -a undo_commands

_exitcode=5

exit_with_undo() {
  for _cmd in ${undo_commands[@]}; do
    eval "${_cmd}" | tee -a "${_log}"
  done
  exit ${_exitcode}
}

exit_cleanly() {
  _exitcode=$1; shift;
  local _message=$1; shift;
  echo "${_message}" | tee -a "${_log}"
  exit_with_undo
}

download_file() {
  local _file
  _file=${1}

  local _out
  _out=${2}

  if ! [ -f "${_file}" ]; then
      exit_cleanly "1" "unable to load file \"${_file}\""
  fi

  cp -r "${_file}" "${_out}"
}

undo_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<ReleaseDate>${_dateqif}<|<ReleaseDate>@DATE@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<Version>${_version}<|<Version>@VERSION@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|msys${_bitness}|msys@BITNESS@|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|${_bitness}-bit|@BITNESS@-bit|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|if (\"@BITNESS@-bit\" === \"@BITNESS@-bit\")|if (\"@BITNESS@-bit\" === \"32-bit\")|g" "{}" \;
}

trap exit_with_undo 0 1 2 15

create_chroot_system() {
  [ -d ${_newmsysbase} ] && rm -r -f ${_newmsysbase}
  /usr/bin/mkdir -p "${_newmsys}"
  pushd "${_newmsys}" > /dev/null

  /usr/bin/mkdir -p var/lib/pacman
  /usr/bin/mkdir -p var/log
  /usr/bin/mkdir -p tmp

  # If ARCHIVE_MSYS64_BASE_TARBALL does not exist, then create a new one.
  if [ -f "${_thisdir}/${ARCHIVE_MSYS64_BASE_TARBALL}" ]; then
    eval "/usr/bin/tar -mxvpf \"${_thisdir}/${ARCHIVE_MSYS64_BASE_TARBALL}\" -C \"${_newmsysbase}/\"" 2>&1 | tee -a "${_log}"
    _result=$?
    if [ "${_result}" -ne "0" ]; then
      exit_cleanly "1" "failed to create newmsys2"
    fi
  else
    eval "pacman -Syu --root \"${_newmsys}\"" | tee -a "${_log}"
    eval "pacman -S base --noconfirm --root \"${_newmsys}\"" | tee -a "${_log}"
    _result=$?
    if [ "${_result}" -ne "0" ]; then
      exit_cleanly "1" "failed to create newmsys2 via command 'pacman -S base --noconfirm --root ${_newmsys}'"
    fi
  fi

  popd > /dev/null
}

do_create_dirs() {
  :
}

do_download_packages() {
  /usr/bin/pacman -Sw ${PACMAN_PACKAGES[@]} --noconfirm --config "pacman.conf" > /tmp/download.lst
}

do_setup_emulators() {
  /usr/bin/cp -r ".mednafen" "${_newmsys}/etc/skel/"
  /usr/bin/cp -r ".yabause" "${_newmsys}/etc/skel/"
}

do_change_icon() {
  cp -v yaul.ico ${_newmsys}/
}

do_copy_post_install_script() {
  /usr/bin/mkdir -p "${_newmsys}/etc/post-install"
  cp -v -f "${_thisdir}/scripts/09-yaul-install.post" "${_newmsys}/etc/post-install/09-yaul-install.post"
}

do_copy_skel_files() {
  /usr/bin/cp -r ".minttyrc" "${_newmsys}/etc/skel/"
}

do_create_motd() {
  cat > "${_newmsys}/etc/motd.tail" <<EOF
printf -- "[H[2J"

_cols=\`tput cols\`
_lines=\`tput lines\`

printf -- "*%.0s" \`seq 1 \${_cols}\`

printf -- "\
* Paths\n\
**    Tool-chain: /opt/tool-chains/sh2eb-elf\n\
**      Examples: /opt/yaul-examples\n\
**\n\
* Emulators\n"
if [ -d "/opt/emulators/mednafen" ]; then
    printf -- "**   Mednafen: /opt/emulators/mednafen\n"
fi
if [ -d "/opt/emulators/yabause" ]; then
    printf -- "**    Yabause: /opt/emulators/yabause\n"
fi
printf -- "*\n"

printf -- "* Environment variables\n"

env | grep 'YAUL' | sort | awk -F= '{ printf "** %-25s = %s\n", \$1, \$2 }'

# Check Mednafen BIOS paths
if [ -d "/opt/emulators/mednafen" ]; then
    if [[ ! -f "\${HOME}/.mednafen/firmware/mpr-17933.bin" ]] &&
       [[ ! -f "\${HOME}/.mednafen/firmware/sega_101.bin" ]] &&
       [[ ! -f "\${HOME}/.mednafen/mpr-17933.bin" ]] &&
       [[ ! -f "\${HOME}/.mednafen/sega_101.bin" ]]; then
        printf -- "\
    *\n\
    * Place BIOS \"mpr-17933.bin\" or \"sega_101.bin\" in:\n\
    ** %s\n" "\`cygpath -w "\${HOME}/.mednafen/"\`"
    fi
fi

# Check Yabause BIOS paths
if [ -d "/opt/emulators/yabause" ]; then
    if [[ ! -f "\${HOME}/.yabause/sega_101.bin" ]]; then
       printf -- "\
    *\n\
    * Place BIOS \"sega_101.bin\" in:\n\
    ** %s\n" "\`cygpath -w "\${HOME}/.yabause/"\`"
    fi
fi

printf -- "*%.0s" \`seq 1 \${_cols}\`

unset _cols
unset _lines
EOF
}

do_modify_pacman() {
  cat >> "${_newmsys}/etc/pacman.conf" <<EOF
[yaul-packages]
SigLevel = Optional TrustAll
Server = http://packages.yaul.org/mingw64-repo/x86_64
EOF
}

do_setup_bashrc() {
  # Undo some defaults
  /usr/bin/sed -E -i 's/^# alias ls.*/alias ls='"'"'ls --color=auto'"'"'/g' "${_newmsys}/etc/skel/.bashrc"
  /usr/bin/sed -E -i 's/^# (alias ll)/\1/g' "${_newmsys}/etc/skel/.bashrc"
  /usr/bin/sed -E -i 's/^# (alias la)/\1/g' "${_newmsys}/etc/skel/.bashrc"
  /usr/bin/sed -E -i 's/^# (shopt -s histappend)/\1/g' "${_newmsys}/etc/skel/.bashrc"

  # Append to .bashrc
  cat >> "${_newmsys}/etc/skel/.bashrc" <<"EOF"

# Begin Yaul customization {
  # Set up environment
  if [ -f "${HOME}/.yaul.env" ]; then
    source "${HOME}/.yaul.env"

    # Update PATH
    export PATH="${YAUL_INSTALL_ROOT}/bin:${PATH}"
    export PATH="/opt/emulators/mednafen:${PATH}"
    export PATH="/opt/emulators/yabause:${PATH}"

    # Show MOTD
    [ -e "${HOME}/.hushlogin" ] || (source /etc/motd.tail 2>/dev/null || true)
  fi

  # Update PS1 to something more modest
  export PS1="\[\e[1;32m\]\u@\[\e[1;33m\]\h\[\e[0m\]\$ "
# } End
EOF
}

do_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@DATE@|${_dateqif}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@VERSION@|${_version}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|@BITNESS@|${_bitness}|g" "{}" \;
  undo_commands+=("undo_seds")
}

do_remove_log() {
  rm -f "${_log}"
}

do_create_chroot_system() {
  echo "Creating Yaul chroot system ${_newmsys}" | tee -a "${_log}"
  create_chroot_system
}

do_remove_previous_installer() {
  echo "Creating Yaul installer /tmp/${_filename}" | tee -a "${_log}"
  if [ -f "/tmp/${_filename}" ]; then
    rm -f "/tmp/${_filename}"
  fi
}

do_handle_build_dependencies() {
  if [ ! -f "${_archivegen}" ]; then
    eval "pacman -S --noconfirm mingw${_bitness}/mingw-w64-${_arch}-qt-installer-framework" | tee -a "${_log}"
  fi

  if [ ! -f "${_archivegen}" ]; then
    exit_cleanly "2" "installation of mingw${_bitness}/mingw-w64-${_arch}-qt-installer-framework failed. See ${_log}"
  fi

  if ! [ -f "${_7z}" ]; then
    eval "pacman -S --noconfirm msys/p7zip" | tee -a "${_log}"
  fi

  if [ ! -f "${_7z}" ]; then
    exit_cleanly "2" "installation of p7zip failed. See ${_log}"
  fi

  if ! [ -f "${_tar}" ]; then
    eval "pacman -S --noconfirm tar" | tee -a "${_log}"
  fi

  if [ ! -f "${_tar}" ]; then
    exit_cleanly "2" "installation of tar failed. See ${_log}"
  fi

  if ! [ -f "${_git}" ]; then
    eval "pacman -S --noconfirm git" | tee -a "${_log}"
  fi

  if [ ! -f "${_git}" ]; then
    exit_cleanly "2" "installation of git failed. See ${_log}"
  fi
}

do_cleanup_tmp_directory() {
  rm -r -f "${_newmsys}/tmp"
  /usr/bin/mkdir -p "${_newmsys}/tmp"
}

do_create_archives() {
  # Collect paths to archive
  local _data="${_ifwroot}"/packages/com.msys2.root.base/data
  [ -d "${_data}" ] && rm -rf "${_data}"
  /usr/bin/mkdir -p "${_data}"
  local _dirs=
  for curr_dir in ${ARCHIVE_EXPORT[@]}; do
    if [ -d "${_newmsys}${curr_dir}" ] || [ -f "${_newmsys}${curr_dir}" ]; then
      _dirs="${_dirs} ${_newmsys}$curr_dir"
    fi
  done

  # Create qt-ifw/packages/com.msys2.root.base/data/msys64.7z file
  if [ -n "${_dirs}" ]; then
    local _compress_cmd="${_archivegen} ${_data}/msys${_bitness}.7z ${_dirs}"
    pushd / > /dev/null
      echo "Run: ${_compress_cmd} ..." | tee -a "${_log}"
      eval "${_compress_cmd}" 2>&1 | tee -a "${_log}"
      _result=$?
      if [ "${_result}" -eq "0" ]; then
            echo " archivegen succeeded. Created ${_data}/msys${_bitness}.7z" | tee -a "${_log}"
      else
            exit_cleanly "3" "archivegen failed. See ${_log}"
      fi
    popd > /dev/null
  fi
}

do_make_installer() {
  eval "\"${_binarycreator}\" \
    -t \"${_installerbase}\" \
    -p \"${_ifwroot}/packages\" \
    -c \"${_ifwroot}/config/config.xml\" \
    --offline-only \
    \"${_filename}\" \
    -v"  | tee -a "${_log}"
}

do_remove_log
do_handle_build_dependencies
do_create_chroot_system
do_change_icon
do_remove_previous_installer
do_create_dirs
do_seds
do_copy_post_install_script
do_copy_skel_files
do_setup_bashrc
do_create_motd
do_modify_pacman
do_download_packages
do_setup_emulators
do_cleanup_tmp_directory
do_create_archives
do_make_installer

exit_cleanly "0" "All done, see \"${_filename}\""
